// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos-cash/verifiable-credential/crypto/bbsplus/bbsplus.proto

package bbsplus

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrivateKey struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PrivateKey) Reset()         { *m = PrivateKey{} }
func (m *PrivateKey) String() string { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()    {}
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_bacee3999802d217, []int{0}
}
func (m *PrivateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKey.Merge(m, src)
}
func (m *PrivateKey) XXX_Size() int {
	return m.Size()
}
func (m *PrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKey proto.InternalMessageInfo

func (m *PrivateKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type PublicParameters struct {
	MsgLength int32  `protobuf:"varint,1,opt,name=msg_length,json=msgLength,proto3" json:"msg_length,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *PublicParameters) Reset()         { *m = PublicParameters{} }
func (m *PublicParameters) String() string { return proto.CompactTextString(m) }
func (*PublicParameters) ProtoMessage()    {}
func (*PublicParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_bacee3999802d217, []int{1}
}
func (m *PublicParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicParameters.Merge(m, src)
}
func (m *PublicParameters) XXX_Size() int {
	return m.Size()
}
func (m *PublicParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicParameters.DiscardUnknown(m)
}

var xxx_messageInfo_PublicParameters proto.InternalMessageInfo

func (m *PublicParameters) GetMsgLength() int32 {
	if m != nil {
		return m.MsgLength
	}
	return 0
}

func (m *PublicParameters) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateKey)(nil), "wasmd.verifiablecredential.crypto.bbsplus.PrivateKey")
	proto.RegisterType((*PublicParameters)(nil), "wasmd.verifiablecredential.crypto.bbsplus.PublicParameters")
}

func init() {
	proto.RegisterFile("cosmos-cash/verifiable-credential/crypto/bbsplus/bbsplus.proto", fileDescriptor_bacee3999802d217)
}

var fileDescriptor_bacee3999802d217 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x63, 0x10, 0x48, 0xb5, 0x18, 0xaa, 0x4c, 0x2c, 0x58, 0xa8, 0x13, 0x0c, 0xb5, 0x07,
	0x76, 0x84, 0x60, 0x2c, 0x43, 0xd4, 0x05, 0xa9, 0x4b, 0x65, 0xbb, 0x47, 0x62, 0x61, 0xd7, 0x91,
	0xcf, 0x29, 0xe4, 0x5f, 0xf0, 0xb3, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x8f, 0xa0, 0xb8, 0xa0, 0xac,
	0x9d, 0xee, 0xf4, 0xee, 0xbe, 0x27, 0xbd, 0x47, 0xef, 0xb5, 0x47, 0xe7, 0x71, 0xae, 0x25, 0x56,
	0x62, 0x07, 0xc1, 0xbc, 0x1a, 0xa9, 0x2c, 0xcc, 0x75, 0x80, 0x0d, 0x6c, 0xa3, 0x91, 0x56, 0xe8,
	0xd0, 0xd6, 0xd1, 0x0b, 0xa5, 0xb0, 0xb6, 0x0d, 0xfe, 0x4f, 0x5e, 0x07, 0x1f, 0x7d, 0x7e, 0xfb,
	0x2e, 0xd1, 0x6d, 0xf8, 0x48, 0x8e, 0x20, 0x3f, 0x80, 0xfc, 0x0f, 0x98, 0x31, 0x4a, 0x8b, 0x60,
	0x76, 0x32, 0xc2, 0x02, 0xda, 0x7c, 0x4a, 0x4f, 0xdf, 0xa0, 0xbd, 0x24, 0xd7, 0xe4, 0xe6, 0x62,
	0x39, 0xac, 0xb3, 0x82, 0x4e, 0x8b, 0x46, 0x59, 0xa3, 0x0b, 0x19, 0xa4, 0x83, 0x08, 0x01, 0xf3,
	0x2b, 0x4a, 0x1d, 0x96, 0x6b, 0x0b, 0xdb, 0x32, 0x56, 0xe9, 0xf9, 0x6c, 0x39, 0x71, 0x58, 0x3e,
	0x27, 0x61, 0x38, 0xd7, 0x09, 0x59, 0x0f, 0x5e, 0x27, 0xc9, 0x6b, 0x72, 0x50, 0x16, 0xd0, 0x3e,
	0xae, 0xbe, 0x3a, 0x46, 0xf6, 0x1d, 0x23, 0x3f, 0x1d, 0x23, 0x9f, 0x3d, 0xcb, 0xf6, 0x3d, 0xcb,
	0xbe, 0x7b, 0x96, 0xad, 0x1e, 0x4a, 0x13, 0xab, 0x46, 0x71, 0xed, 0x9d, 0x78, 0xf2, 0xe8, 0x5e,
	0x24, 0x3a, 0x91, 0xa2, 0x88, 0x8f, 0xa3, 0x6a, 0x50, 0xe7, 0x29, 0xff, 0xdd, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x35, 0xfa, 0x47, 0x53, 0x41, 0x01, 0x00, 0x00,
}

func (m *PrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintBbsplus(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintBbsplus(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgLength != 0 {
		i = encodeVarintBbsplus(dAtA, i, uint64(m.MsgLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBbsplus(dAtA []byte, offset int, v uint64) int {
	offset -= sovBbsplus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBbsplus(uint64(l))
	}
	return n
}

func (m *PublicParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgLength != 0 {
		n += 1 + sovBbsplus(uint64(m.MsgLength))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBbsplus(uint64(l))
	}
	return n
}

func sovBbsplus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBbsplus(x uint64) (n int) {
	return sovBbsplus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbsplus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbsplus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBbsplus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBbsplus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBbsplus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbsplus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBbsplus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgLength", wireType)
			}
			m.MsgLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbsplus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBbsplus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBbsplus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBbsplus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBbsplus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBbsplus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBbsplus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBbsplus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBbsplus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBbsplus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBbsplus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBbsplus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBbsplus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBbsplus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBbsplus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBbsplus = fmt.Errorf("proto: unexpected end of group")
)
