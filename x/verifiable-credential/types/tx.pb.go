// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/verifiable-credential/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	accumulator "github.com/CosmWasm/wasmd/x/verifiable-credential/crypto/accumulator"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgIssueRegistrationCredential struct {
	Credential *VerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Owner      string                `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgIssueRegistrationCredential) Reset()         { *m = MsgIssueRegistrationCredential{} }
func (m *MsgIssueRegistrationCredential) String() string { return proto.CompactTextString(m) }
func (*MsgIssueRegistrationCredential) ProtoMessage()    {}
func (*MsgIssueRegistrationCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{0}
}
func (m *MsgIssueRegistrationCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueRegistrationCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueRegistrationCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueRegistrationCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueRegistrationCredential.Merge(m, src)
}
func (m *MsgIssueRegistrationCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueRegistrationCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueRegistrationCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueRegistrationCredential proto.InternalMessageInfo

// MsgIssueRegistrationCredentialResponse reply for the IssueRegistartion call
type MsgIssueRegistrationCredentialResponse struct {
}

func (m *MsgIssueRegistrationCredentialResponse) Reset() {
	*m = MsgIssueRegistrationCredentialResponse{}
}
func (m *MsgIssueRegistrationCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueRegistrationCredentialResponse) ProtoMessage()    {}
func (*MsgIssueRegistrationCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{1}
}
func (m *MsgIssueRegistrationCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueRegistrationCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueRegistrationCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueRegistrationCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueRegistrationCredentialResponse.Merge(m, src)
}
func (m *MsgIssueRegistrationCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueRegistrationCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueRegistrationCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueRegistrationCredentialResponse proto.InternalMessageInfo

// MsgIssueUserCredential defines sdk message to issue user credentials
type MsgIssueUserCredential struct {
	Credential *VerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Owner      string                `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgIssueUserCredential) Reset()         { *m = MsgIssueUserCredential{} }
func (m *MsgIssueUserCredential) String() string { return proto.CompactTextString(m) }
func (*MsgIssueUserCredential) ProtoMessage()    {}
func (*MsgIssueUserCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{2}
}
func (m *MsgIssueUserCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueUserCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueUserCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueUserCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueUserCredential.Merge(m, src)
}
func (m *MsgIssueUserCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueUserCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueUserCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueUserCredential proto.InternalMessageInfo

type MsgIssueUserCredentialResponse struct {
}

func (m *MsgIssueUserCredentialResponse) Reset()         { *m = MsgIssueUserCredentialResponse{} }
func (m *MsgIssueUserCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueUserCredentialResponse) ProtoMessage()    {}
func (*MsgIssueUserCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{3}
}
func (m *MsgIssueUserCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueUserCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueUserCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueUserCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueUserCredentialResponse.Merge(m, src)
}
func (m *MsgIssueUserCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueUserCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueUserCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueUserCredentialResponse proto.InternalMessageInfo

// MsgIssueParameterCredential message contains data for public parameters credential
type MsgIssueAnonymousCredentialSchema struct {
	Credential *VerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Owner      string                `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgIssueAnonymousCredentialSchema) Reset()         { *m = MsgIssueAnonymousCredentialSchema{} }
func (m *MsgIssueAnonymousCredentialSchema) String() string { return proto.CompactTextString(m) }
func (*MsgIssueAnonymousCredentialSchema) ProtoMessage()    {}
func (*MsgIssueAnonymousCredentialSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{4}
}
func (m *MsgIssueAnonymousCredentialSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueAnonymousCredentialSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueAnonymousCredentialSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueAnonymousCredentialSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueAnonymousCredentialSchema.Merge(m, src)
}
func (m *MsgIssueAnonymousCredentialSchema) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueAnonymousCredentialSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueAnonymousCredentialSchema.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueAnonymousCredentialSchema proto.InternalMessageInfo

// MsgIssueLicenseCredentialResponse reply for the issue license call
type MsgIssueAnonymousCredentialSchemaResponse struct {
}

func (m *MsgIssueAnonymousCredentialSchemaResponse) Reset() {
	*m = MsgIssueAnonymousCredentialSchemaResponse{}
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgIssueAnonymousCredentialSchemaResponse) ProtoMessage() {}
func (*MsgIssueAnonymousCredentialSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{5}
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueAnonymousCredentialSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueAnonymousCredentialSchemaResponse.Merge(m, src)
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueAnonymousCredentialSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueAnonymousCredentialSchemaResponse proto.InternalMessageInfo

// MsgUpdateSchemaAccumulatorState message contains data for adding/deleting members from the state
type MsgUpdateVerifiableCredential struct {
	Credential *VerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Owner      string                `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgUpdateVerifiableCredential) Reset()         { *m = MsgUpdateVerifiableCredential{} }
func (m *MsgUpdateVerifiableCredential) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerifiableCredential) ProtoMessage()    {}
func (*MsgUpdateVerifiableCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{6}
}
func (m *MsgUpdateVerifiableCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerifiableCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerifiableCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerifiableCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerifiableCredential.Merge(m, src)
}
func (m *MsgUpdateVerifiableCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerifiableCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerifiableCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerifiableCredential proto.InternalMessageInfo

// MsgUpdateSchemaAccumulatorStateResponse reply for the issue license call
type MsgUpdateVerifiableCredentialResponse struct {
}

func (m *MsgUpdateVerifiableCredentialResponse) Reset()         { *m = MsgUpdateVerifiableCredentialResponse{} }
func (m *MsgUpdateVerifiableCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerifiableCredentialResponse) ProtoMessage()    {}
func (*MsgUpdateVerifiableCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{7}
}
func (m *MsgUpdateVerifiableCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerifiableCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerifiableCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerifiableCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerifiableCredentialResponse.Merge(m, src)
}
func (m *MsgUpdateVerifiableCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerifiableCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerifiableCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerifiableCredentialResponse proto.InternalMessageInfo

// MsgUpdateAccumulatorState message contains data for adding/deleting members from the state
type MsgUpdateAccumulatorState struct {
	CredentialId string             `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	IssuanceDate *time.Time         `protobuf:"bytes,2,opt,name=issuance_date,json=issuanceDate,proto3,stdtime" json:"issuance_date,omitempty"`
	State        *accumulator.State `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Proof        *Proof             `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Owner        string             `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgUpdateAccumulatorState) Reset()         { *m = MsgUpdateAccumulatorState{} }
func (m *MsgUpdateAccumulatorState) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccumulatorState) ProtoMessage()    {}
func (*MsgUpdateAccumulatorState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{8}
}
func (m *MsgUpdateAccumulatorState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccumulatorState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccumulatorState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccumulatorState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccumulatorState.Merge(m, src)
}
func (m *MsgUpdateAccumulatorState) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccumulatorState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccumulatorState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccumulatorState proto.InternalMessageInfo

// MsgUpdateSchemaAccumulatorStateResponse reply for the issue license call
type MsgUpdateAccumulatorStateResponse struct {
}

func (m *MsgUpdateAccumulatorStateResponse) Reset()         { *m = MsgUpdateAccumulatorStateResponse{} }
func (m *MsgUpdateAccumulatorStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccumulatorStateResponse) ProtoMessage()    {}
func (*MsgUpdateAccumulatorStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{9}
}
func (m *MsgUpdateAccumulatorStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccumulatorStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccumulatorStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccumulatorStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccumulatorStateResponse.Merge(m, src)
}
func (m *MsgUpdateAccumulatorStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccumulatorStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccumulatorStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccumulatorStateResponse proto.InternalMessageInfo

// MsgRevokeCredential
type MsgRevokeCredential struct {
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	Owner        string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgRevokeCredential) Reset()         { *m = MsgRevokeCredential{} }
func (m *MsgRevokeCredential) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCredential) ProtoMessage()    {}
func (*MsgRevokeCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{10}
}
func (m *MsgRevokeCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCredential.Merge(m, src)
}
func (m *MsgRevokeCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCredential proto.InternalMessageInfo

// MsgRevokeCredentialResponse
type MsgRevokeCredentialResponse struct {
}

func (m *MsgRevokeCredentialResponse) Reset()         { *m = MsgRevokeCredentialResponse{} }
func (m *MsgRevokeCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCredentialResponse) ProtoMessage()    {}
func (*MsgRevokeCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{11}
}
func (m *MsgRevokeCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCredentialResponse.Merge(m, src)
}
func (m *MsgRevokeCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCredentialResponse proto.InternalMessageInfo

// MsgIssueCredential is used to issue new registration credential
// this message is used by other modules
type MsgIssueCredential struct {
	Credential *VerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Owner      string                `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgIssueCredential) Reset()         { *m = MsgIssueCredential{} }
func (m *MsgIssueCredential) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCredential) ProtoMessage()    {}
func (*MsgIssueCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{12}
}
func (m *MsgIssueCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCredential.Merge(m, src)
}
func (m *MsgIssueCredential) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCredential.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCredential proto.InternalMessageInfo

// MsgIssueCredentialResponse reply for the issue credential call
type MsgIssueCredentialResponse struct {
}

func (m *MsgIssueCredentialResponse) Reset()         { *m = MsgIssueCredentialResponse{} }
func (m *MsgIssueCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCredentialResponse) ProtoMessage()    {}
func (*MsgIssueCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b7e75b3561208, []int{13}
}
func (m *MsgIssueCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCredentialResponse.Merge(m, src)
}
func (m *MsgIssueCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCredentialResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgIssueRegistrationCredential)(nil), "wasmd.verifiablecredential.MsgIssueRegistrationCredential")
	proto.RegisterType((*MsgIssueRegistrationCredentialResponse)(nil), "wasmd.verifiablecredential.MsgIssueRegistrationCredentialResponse")
	proto.RegisterType((*MsgIssueUserCredential)(nil), "wasmd.verifiablecredential.MsgIssueUserCredential")
	proto.RegisterType((*MsgIssueUserCredentialResponse)(nil), "wasmd.verifiablecredential.MsgIssueUserCredentialResponse")
	proto.RegisterType((*MsgIssueAnonymousCredentialSchema)(nil), "wasmd.verifiablecredential.MsgIssueAnonymousCredentialSchema")
	proto.RegisterType((*MsgIssueAnonymousCredentialSchemaResponse)(nil), "wasmd.verifiablecredential.MsgIssueAnonymousCredentialSchemaResponse")
	proto.RegisterType((*MsgUpdateVerifiableCredential)(nil), "wasmd.verifiablecredential.MsgUpdateVerifiableCredential")
	proto.RegisterType((*MsgUpdateVerifiableCredentialResponse)(nil), "wasmd.verifiablecredential.MsgUpdateVerifiableCredentialResponse")
	proto.RegisterType((*MsgUpdateAccumulatorState)(nil), "wasmd.verifiablecredential.MsgUpdateAccumulatorState")
	proto.RegisterType((*MsgUpdateAccumulatorStateResponse)(nil), "wasmd.verifiablecredential.MsgUpdateAccumulatorStateResponse")
	proto.RegisterType((*MsgRevokeCredential)(nil), "wasmd.verifiablecredential.MsgRevokeCredential")
	proto.RegisterType((*MsgRevokeCredentialResponse)(nil), "wasmd.verifiablecredential.MsgRevokeCredentialResponse")
	proto.RegisterType((*MsgIssueCredential)(nil), "wasmd.verifiablecredential.MsgIssueCredential")
	proto.RegisterType((*MsgIssueCredentialResponse)(nil), "wasmd.verifiablecredential.MsgIssueCredentialResponse")
}

func init() {
	proto.RegisterFile("ssi/verifiable-credential/tx.proto", fileDescriptor_f48b7e75b3561208)
}

var fileDescriptor_f48b7e75b3561208 = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0x80, 0x55, 0x79, 0x40, 0x62, 0x0a, 0x21, 0x6b, 0x91, 0x2e, 0x2c, 0x51, 0x31,
	0xc6, 0xd6, 0xac, 0x12, 0x22, 0x09, 0x26, 0x80, 0x1c, 0x30, 0xd9, 0x04, 0x8b, 0x68, 0xc2, 0x85,
	0xcc, 0x76, 0x87, 0xd2, 0xb8, 0xed, 0x34, 0x9d, 0x29, 0x3f, 0x12, 0x4f, 0x26, 0x1a, 0xe3, 0xc1,
	0xa0, 0x89, 0x17, 0x13, 0x13, 0x4e, 0x9e, 0xfc, 0x43, 0x3c, 0x72, 0xf4, 0xa6, 0x81, 0x8b, 0x7f,
	0x86, 0xd9, 0x96, 0x4e, 0x17, 0x69, 0xbb, 0xcb, 0x7a, 0xd8, 0x5b, 0x3b, 0xf9, 0x7e, 0xbf, 0xef,
	0xd3, 0xb7, 0xf3, 0x5e, 0x16, 0x4a, 0x8c, 0x59, 0xda, 0x0e, 0xf1, 0xac, 0x2d, 0x0b, 0x57, 0xeb,
	0xe4, 0xae, 0xe1, 0x91, 0x1a, 0x71, 0xb8, 0x85, 0xeb, 0x1a, 0xdf, 0x53, 0x5d, 0x8f, 0x72, 0x2a,
	0xc9, 0xbb, 0x98, 0xd9, 0x35, 0x35, 0x56, 0xc5, 0x22, 0x79, 0xc4, 0xa4, 0x26, 0x0d, 0x64, 0x5a,
	0xe3, 0x29, 0x74, 0xc8, 0x45, 0x93, 0x52, 0xb3, 0x4e, 0xb4, 0xe0, 0xad, 0xea, 0x6f, 0x69, 0xdc,
	0xb2, 0x09, 0xe3, 0xd8, 0x76, 0x4f, 0x05, 0x33, 0xe9, 0x65, 0x13, 0x4f, 0x4f, 0x6d, 0x8f, 0xd2,
	0x6d, 0x86, 0xb7, 0xef, 0x72, 0xaa, 0x61, 0xc3, 0xf0, 0x6d, 0xbf, 0x8e, 0x39, 0xf5, 0x9a, 0x9f,
	0x43, 0x7f, 0xe9, 0x13, 0x02, 0xa5, 0xc2, 0xcc, 0x15, 0xc6, 0x7c, 0xa2, 0x13, 0xd3, 0x62, 0xdc,
	0xc3, 0xdc, 0xa2, 0xce, 0x92, 0xc8, 0x91, 0x56, 0x01, 0xe2, 0xd4, 0x02, 0x9a, 0x40, 0xd3, 0x03,
	0xe5, 0x7b, 0x6a, 0x7a, 0x07, 0xd4, 0xe7, 0xe2, 0x30, 0x4e, 0xd1, 0x9b, 0x32, 0xa4, 0x11, 0xc8,
	0xd3, 0x5d, 0x87, 0x78, 0x85, 0x9e, 0x09, 0x34, 0xdd, 0xaf, 0x87, 0x2f, 0x73, 0x57, 0xde, 0x1d,
	0x16, 0x73, 0x7f, 0x0e, 0x8b, 0xb9, 0xd2, 0x34, 0xdc, 0xcc, 0x66, 0xd2, 0x09, 0x73, 0xa9, 0xc3,
	0x48, 0xe9, 0x3d, 0x82, 0xd1, 0x48, 0xba, 0xce, 0x88, 0xd7, 0x55, 0xec, 0x89, 0xb8, 0x95, 0x67,
	0x59, 0x04, 0xee, 0x67, 0x04, 0x93, 0x91, 0x64, 0xc1, 0xa1, 0xce, 0xbe, 0x4d, 0x7d, 0x16, 0xeb,
	0xd6, 0x8c, 0x6d, 0x62, 0xe3, 0x2e, 0x90, 0xdf, 0x81, 0xdb, 0x2d, 0xb1, 0xc4, 0x47, 0x7c, 0x44,
	0x30, 0x5e, 0x61, 0xe6, 0xba, 0x5b, 0xc3, 0x9c, 0x24, 0x95, 0xee, 0xc2, 0x07, 0xdc, 0x82, 0x1b,
	0x99, 0x48, 0x02, 0xfe, 0x7b, 0x0f, 0x5c, 0x13, 0xca, 0x85, 0x78, 0x1c, 0xd6, 0x38, 0xe6, 0x44,
	0x9a, 0x82, 0xa1, 0xb8, 0xe8, 0xa6, 0x55, 0x0b, 0xd8, 0xfb, 0xf5, 0xc1, 0xf8, 0x70, 0xa5, 0x26,
	0x2d, 0xc3, 0x90, 0xc5, 0x98, 0x8f, 0x1d, 0x83, 0x6c, 0x36, 0x52, 0x02, 0xa6, 0x81, 0xb2, 0xac,
	0x86, 0x23, 0xae, 0x46, 0x23, 0xae, 0x3e, 0x8b, 0x46, 0x7c, 0xb1, 0xef, 0xe0, 0x57, 0x11, 0xe9,
	0x83, 0x91, 0xed, 0x71, 0xa3, 0xd6, 0x13, 0xc8, 0xb3, 0x46, 0xd1, 0x42, 0x6f, 0x60, 0x7f, 0x90,
	0xd5, 0x9f, 0x70, 0x94, 0xd5, 0xe6, 0xf1, 0x0d, 0x80, 0xf5, 0x30, 0x42, 0x9a, 0x85, 0xbc, 0xeb,
	0x51, 0xba, 0x55, 0xe8, 0x0b, 0xb2, 0x26, 0xb3, 0xb2, 0x56, 0x1b, 0x42, 0x3d, 0xd4, 0xc7, 0x7d,
	0xcd, 0x27, 0xf7, 0x75, 0x2a, 0xb8, 0xaf, 0xc9, 0xdd, 0x12, 0x3d, 0xdd, 0x80, 0xe1, 0x0a, 0x33,
	0x75, 0xb2, 0x43, 0x5f, 0x36, 0xdf, 0x82, 0xb6, 0x9a, 0xd9, 0xea, 0x87, 0x1d, 0x87, 0xb1, 0x84,
	0x6c, 0x51, 0xfa, 0x2d, 0x02, 0x29, 0xba, 0xb9, 0x5d, 0xbd, 0x80, 0xd7, 0x41, 0x3e, 0xcf, 0x11,
	0x61, 0x96, 0x5f, 0x5f, 0x86, 0xde, 0x0a, 0x33, 0xa5, 0xaf, 0x08, 0xc6, 0xb2, 0x56, 0xed, 0x5c,
	0x16, 0x63, 0xf6, 0x4a, 0x94, 0x17, 0x3b, 0xf7, 0x46, 0x9c, 0xd2, 0x1b, 0x04, 0xc3, 0x49, 0xbb,
	0xb4, 0xdc, 0x4e, 0xf6, 0x59, 0x8f, 0x3c, 0x77, 0x71, 0x8f, 0xe0, 0xf8, 0x86, 0x40, 0x69, 0xb1,
	0x24, 0xe7, 0xdb, 0x89, 0x4f, 0xb5, 0xcb, 0xcb, 0xff, 0x65, 0x17, 0xa0, 0x1f, 0x10, 0x8c, 0xa6,
	0xec, 0x92, 0x99, 0x16, 0x15, 0x92, 0x6d, 0xf2, 0x7c, 0x47, 0x36, 0x01, 0xf4, 0x05, 0x81, 0x9c,
	0xb1, 0x99, 0x1f, 0xb6, 0x95, 0x9e, 0x64, 0x95, 0x17, 0x3a, 0xb6, 0x0a, 0xb8, 0x57, 0x70, 0xf5,
	0xdc, 0x96, 0xd0, 0x5a, 0xc4, 0xfe, 0x6b, 0x90, 0x67, 0x2f, 0x68, 0x88, 0xaa, 0x2f, 0x3e, 0xfd,
	0x71, 0xac, 0xa0, 0xa3, 0x63, 0x05, 0xfd, 0x3e, 0x56, 0xd0, 0xc1, 0x89, 0x92, 0x3b, 0x3a, 0x51,
	0x72, 0x3f, 0x4f, 0x94, 0xdc, 0xc6, 0xac, 0x69, 0xf1, 0x6d, 0xbf, 0xaa, 0x1a, 0xd4, 0xd6, 0x96,
	0x28, 0xb3, 0x5f, 0x60, 0x66, 0x6b, 0x41, 0x15, 0x6d, 0x2f, 0xed, 0xaf, 0xe0, 0xbe, 0x4b, 0x58,
	0xf5, 0x52, 0xb0, 0xeb, 0xef, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xae, 0x21, 0xb6, 0x34,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IssueRegistrationCredential issue a new registration credential for a public entity
	IssueRegistrationCredential(ctx context.Context, in *MsgIssueRegistrationCredential, opts ...grpc.CallOption) (*MsgIssueRegistrationCredentialResponse, error)
	// IssueUserCredential issue user credential to allow an account to transact
	IssueUserCredential(ctx context.Context, in *MsgIssueUserCredential, opts ...grpc.CallOption) (*MsgIssueUserCredentialResponse, error)
	// IssueParameterCredential issue public parameters for anonymous credentials
	IssueAnonymousCredentialSchema(ctx context.Context, in *MsgIssueAnonymousCredentialSchema, opts ...grpc.CallOption) (*MsgIssueAnonymousCredentialSchemaResponse, error)
	// UpdateAccumulatorState updates membership or non-membership state after adding or deleting members
	UpdateAccumulatorState(ctx context.Context, in *MsgUpdateAccumulatorState, opts ...grpc.CallOption) (*MsgUpdateAccumulatorStateResponse, error)
	// UpdateVerifiableCredential updates a verifiable credential
	UpdateVerifiableCredential(ctx context.Context, in *MsgUpdateVerifiableCredential, opts ...grpc.CallOption) (*MsgUpdateVerifiableCredentialResponse, error)
	// RevokeCredential a credential
	RevokeCredential(ctx context.Context, in *MsgRevokeCredential, opts ...grpc.CallOption) (*MsgRevokeCredentialResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IssueRegistrationCredential(ctx context.Context, in *MsgIssueRegistrationCredential, opts ...grpc.CallOption) (*MsgIssueRegistrationCredentialResponse, error) {
	out := new(MsgIssueRegistrationCredentialResponse)
	err := c.cc.Invoke(ctx, "/wasmd.verifiablecredential.Msg/IssueRegistrationCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueUserCredential(ctx context.Context, in *MsgIssueUserCredential, opts ...grpc.CallOption) (*MsgIssueUserCredentialResponse, error) {
	out := new(MsgIssueUserCredentialResponse)
	err := c.cc.Invoke(ctx, "/wasmd.verifiablecredential.Msg/IssueUserCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueAnonymousCredentialSchema(ctx context.Context, in *MsgIssueAnonymousCredentialSchema, opts ...grpc.CallOption) (*MsgIssueAnonymousCredentialSchemaResponse, error) {
	out := new(MsgIssueAnonymousCredentialSchemaResponse)
	err := c.cc.Invoke(ctx, "/wasmd.verifiablecredential.Msg/IssueAnonymousCredentialSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccumulatorState(ctx context.Context, in *MsgUpdateAccumulatorState, opts ...grpc.CallOption) (*MsgUpdateAccumulatorStateResponse, error) {
	out := new(MsgUpdateAccumulatorStateResponse)
	err := c.cc.Invoke(ctx, "/wasmd.verifiablecredential.Msg/UpdateAccumulatorState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVerifiableCredential(ctx context.Context, in *MsgUpdateVerifiableCredential, opts ...grpc.CallOption) (*MsgUpdateVerifiableCredentialResponse, error) {
	out := new(MsgUpdateVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, "/wasmd.verifiablecredential.Msg/UpdateVerifiableCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeCredential(ctx context.Context, in *MsgRevokeCredential, opts ...grpc.CallOption) (*MsgRevokeCredentialResponse, error) {
	out := new(MsgRevokeCredentialResponse)
	err := c.cc.Invoke(ctx, "/wasmd.verifiablecredential.Msg/RevokeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IssueRegistrationCredential issue a new registration credential for a public entity
	IssueRegistrationCredential(context.Context, *MsgIssueRegistrationCredential) (*MsgIssueRegistrationCredentialResponse, error)
	// IssueUserCredential issue user credential to allow an account to transact
	IssueUserCredential(context.Context, *MsgIssueUserCredential) (*MsgIssueUserCredentialResponse, error)
	// IssueParameterCredential issue public parameters for anonymous credentials
	IssueAnonymousCredentialSchema(context.Context, *MsgIssueAnonymousCredentialSchema) (*MsgIssueAnonymousCredentialSchemaResponse, error)
	// UpdateAccumulatorState updates membership or non-membership state after adding or deleting members
	UpdateAccumulatorState(context.Context, *MsgUpdateAccumulatorState) (*MsgUpdateAccumulatorStateResponse, error)
	// UpdateVerifiableCredential updates a verifiable credential
	UpdateVerifiableCredential(context.Context, *MsgUpdateVerifiableCredential) (*MsgUpdateVerifiableCredentialResponse, error)
	// RevokeCredential a credential
	RevokeCredential(context.Context, *MsgRevokeCredential) (*MsgRevokeCredentialResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IssueRegistrationCredential(ctx context.Context, req *MsgIssueRegistrationCredential) (*MsgIssueRegistrationCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueRegistrationCredential not implemented")
}
func (*UnimplementedMsgServer) IssueUserCredential(ctx context.Context, req *MsgIssueUserCredential) (*MsgIssueUserCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueUserCredential not implemented")
}
func (*UnimplementedMsgServer) IssueAnonymousCredentialSchema(ctx context.Context, req *MsgIssueAnonymousCredentialSchema) (*MsgIssueAnonymousCredentialSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueAnonymousCredentialSchema not implemented")
}
func (*UnimplementedMsgServer) UpdateAccumulatorState(ctx context.Context, req *MsgUpdateAccumulatorState) (*MsgUpdateAccumulatorStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccumulatorState not implemented")
}
func (*UnimplementedMsgServer) UpdateVerifiableCredential(ctx context.Context, req *MsgUpdateVerifiableCredential) (*MsgUpdateVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerifiableCredential not implemented")
}
func (*UnimplementedMsgServer) RevokeCredential(ctx context.Context, req *MsgRevokeCredential) (*MsgRevokeCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCredential not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IssueRegistrationCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueRegistrationCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueRegistrationCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmd.verifiablecredential.Msg/IssueRegistrationCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueRegistrationCredential(ctx, req.(*MsgIssueRegistrationCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueUserCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueUserCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueUserCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmd.verifiablecredential.Msg/IssueUserCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueUserCredential(ctx, req.(*MsgIssueUserCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueAnonymousCredentialSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueAnonymousCredentialSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueAnonymousCredentialSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmd.verifiablecredential.Msg/IssueAnonymousCredentialSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueAnonymousCredentialSchema(ctx, req.(*MsgIssueAnonymousCredentialSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccumulatorState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccumulatorState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccumulatorState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmd.verifiablecredential.Msg/UpdateAccumulatorState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccumulatorState(ctx, req.(*MsgUpdateAccumulatorState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVerifiableCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmd.verifiablecredential.Msg/UpdateVerifiableCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVerifiableCredential(ctx, req.(*MsgUpdateVerifiableCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasmd.verifiablecredential.Msg/RevokeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeCredential(ctx, req.(*MsgRevokeCredential))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wasmd.verifiablecredential.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueRegistrationCredential",
			Handler:    _Msg_IssueRegistrationCredential_Handler,
		},
		{
			MethodName: "IssueUserCredential",
			Handler:    _Msg_IssueUserCredential_Handler,
		},
		{
			MethodName: "IssueAnonymousCredentialSchema",
			Handler:    _Msg_IssueAnonymousCredentialSchema_Handler,
		},
		{
			MethodName: "UpdateAccumulatorState",
			Handler:    _Msg_UpdateAccumulatorState_Handler,
		},
		{
			MethodName: "UpdateVerifiableCredential",
			Handler:    _Msg_UpdateVerifiableCredential_Handler,
		},
		{
			MethodName: "RevokeCredential",
			Handler:    _Msg_RevokeCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssi/verifiable-credential/tx.proto",
}

func (m *MsgIssueRegistrationCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueRegistrationCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueRegistrationCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueRegistrationCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueRegistrationCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueRegistrationCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIssueUserCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueUserCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueUserCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueUserCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueUserCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueUserCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIssueAnonymousCredentialSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueAnonymousCredentialSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueAnonymousCredentialSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueAnonymousCredentialSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueAnonymousCredentialSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueAnonymousCredentialSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerifiableCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerifiableCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerifiableCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerifiableCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerifiableCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerifiableCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccumulatorState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccumulatorState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccumulatorState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IssuanceDate != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuanceDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintTx(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccumulatorStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccumulatorStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccumulatorStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIssueCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIssueRegistrationCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueRegistrationCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIssueUserCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueUserCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIssueAnonymousCredentialSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueAnonymousCredentialSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVerifiableCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVerifiableCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccumulatorState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IssuanceDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccumulatorStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevokeCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIssueCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIssueRegistrationCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueRegistrationCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueRegistrationCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &VerifiableCredential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueRegistrationCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueRegistrationCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueRegistrationCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueUserCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueUserCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueUserCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &VerifiableCredential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueUserCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueUserCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueUserCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueAnonymousCredentialSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueAnonymousCredentialSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueAnonymousCredentialSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &VerifiableCredential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueAnonymousCredentialSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueAnonymousCredentialSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueAnonymousCredentialSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerifiableCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerifiableCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerifiableCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &VerifiableCredential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerifiableCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerifiableCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerifiableCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccumulatorState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccumulatorState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccumulatorState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuanceDate == nil {
				m.IssuanceDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuanceDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &accumulator.State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccumulatorStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccumulatorStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccumulatorStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &VerifiableCredential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
