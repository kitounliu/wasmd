// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos-cash/verifiable-credential/verifiable-credential.proto

package types

import (
	fmt "fmt"
	anonymouscredential "github.com/CosmWasm/wasmd/x/verifiable-credential/crypto/anonymouscredential"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VerifiableCredential represents a verifiable credential
type VerifiableCredential struct {
	// @context is spec for verifiable credential.
	Context []string `protobuf:"bytes,1,rep,name=context,proto3" json:"@context,omitempty"`
	// The value of the id property MUST be a single URI. It is RECOMMENDED
	// that the URI in the id be one which, if dereferenced, results in a
	// document containing machine-readable information about the id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The value of the type property MUST be, or map to (through interpretation
	// of the @context property), one or more URIs. If more than one URI is
	// provided, the URIs MUST be interpreted as an unordered set.
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// The value of the issuer property MUST be either a URI or an object
	// containing an id property. It is RECOMMENDED that the URI in the issuer
	// or its id be one which, if dereferenced, results in a document containing
	// machine-readable information about the issuer that can be used to verify
	// the information expressed in the credential.
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// A credential MUST have an issuanceDate property. The value of the issuanceDate
	// property MUST be a string value of an [RFC3339] combined date and time string
	// representing the date and time the credential becomes valid, which could
	// be a date and time in the future. Note that this value represents the earliest
	// point in time at which the information associated with the credentialSubject
	// property becomes valid.
	IssuanceDate *time.Time `protobuf:"bytes,5,opt,name=issuance_date,json=issuanceDate,proto3,stdtime" json:"issuance_date,omitempty"`
	// The value of the credentialSubject property is defined as a set of
	// objects that contain one or more properties that are each related
	// to a subject of the verifiable credential.
	//
	// Types that are valid to be assigned to CredentialSubject:
	//	*VerifiableCredential_RegistrationCred
	//	*VerifiableCredential_UserCred
	//	*VerifiableCredential_AnonCredSchema
	CredentialSubject isVerifiableCredential_CredentialSubject `protobuf_oneof:"credential_subject"`
	// One or more cryptographic proofs that can be used to detect tampering
	// and verify the authorship of a credential or presentation. The specific
	// method used for an embedded proof MUST be included using the type property.
	Proof *Proof `protobuf:"bytes,9,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *VerifiableCredential) Reset()         { *m = VerifiableCredential{} }
func (m *VerifiableCredential) String() string { return proto.CompactTextString(m) }
func (*VerifiableCredential) ProtoMessage()    {}
func (*VerifiableCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{0}
}
func (m *VerifiableCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifiableCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifiableCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifiableCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifiableCredential.Merge(m, src)
}
func (m *VerifiableCredential) XXX_Size() int {
	return m.Size()
}
func (m *VerifiableCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifiableCredential.DiscardUnknown(m)
}

var xxx_messageInfo_VerifiableCredential proto.InternalMessageInfo

type isVerifiableCredential_CredentialSubject interface {
	isVerifiableCredential_CredentialSubject()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VerifiableCredential_RegistrationCred struct {
	RegistrationCred *RegistrationCredentialSubject `protobuf:"bytes,6,opt,name=registration_cred,json=registrationCred,proto3,oneof" json:"registration_cred,omitempty"`
}
type VerifiableCredential_UserCred struct {
	UserCred *UserCredentialSubject `protobuf:"bytes,7,opt,name=user_cred,json=userCred,proto3,oneof" json:"user_cred,omitempty"`
}
type VerifiableCredential_AnonCredSchema struct {
	AnonCredSchema *AnonymousCredentialSchemaSubject `protobuf:"bytes,8,opt,name=anon_cred_schema,json=anonCredSchema,proto3,oneof" json:"anon_cred_schema,omitempty"`
}

func (*VerifiableCredential_RegistrationCred) isVerifiableCredential_CredentialSubject() {}
func (*VerifiableCredential_UserCred) isVerifiableCredential_CredentialSubject()         {}
func (*VerifiableCredential_AnonCredSchema) isVerifiableCredential_CredentialSubject()   {}

func (m *VerifiableCredential) GetCredentialSubject() isVerifiableCredential_CredentialSubject {
	if m != nil {
		return m.CredentialSubject
	}
	return nil
}

func (m *VerifiableCredential) GetContext() []string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *VerifiableCredential) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VerifiableCredential) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *VerifiableCredential) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *VerifiableCredential) GetIssuanceDate() *time.Time {
	if m != nil {
		return m.IssuanceDate
	}
	return nil
}

func (m *VerifiableCredential) GetRegistrationCred() *RegistrationCredentialSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_RegistrationCred); ok {
		return x.RegistrationCred
	}
	return nil
}

func (m *VerifiableCredential) GetUserCred() *UserCredentialSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_UserCred); ok {
		return x.UserCred
	}
	return nil
}

func (m *VerifiableCredential) GetAnonCredSchema() *AnonymousCredentialSchemaSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_AnonCredSchema); ok {
		return x.AnonCredSchema
	}
	return nil
}

func (m *VerifiableCredential) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VerifiableCredential) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VerifiableCredential_RegistrationCred)(nil),
		(*VerifiableCredential_UserCred)(nil),
		(*VerifiableCredential_AnonCredSchema)(nil),
	}
}

type AnonymousCredentialSchemaSubject struct {
	// dummy id for compatibility with other types of credentials
	Id           string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         []string                              `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	Context      []string                              `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty"`
	PublicParams *anonymouscredential.PublicParameters `protobuf:"bytes,4,opt,name=public_params,json=publicParams,proto3" json:"public_params,omitempty"`
}

func (m *AnonymousCredentialSchemaSubject) Reset()         { *m = AnonymousCredentialSchemaSubject{} }
func (m *AnonymousCredentialSchemaSubject) String() string { return proto.CompactTextString(m) }
func (*AnonymousCredentialSchemaSubject) ProtoMessage()    {}
func (*AnonymousCredentialSchemaSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{1}
}
func (m *AnonymousCredentialSchemaSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymousCredentialSchemaSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnonymousCredentialSchemaSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnonymousCredentialSchemaSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymousCredentialSchemaSubject.Merge(m, src)
}
func (m *AnonymousCredentialSchemaSubject) XXX_Size() int {
	return m.Size()
}
func (m *AnonymousCredentialSchemaSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymousCredentialSchemaSubject.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymousCredentialSchemaSubject proto.InternalMessageInfo

func (m *AnonymousCredentialSchemaSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AnonymousCredentialSchemaSubject) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *AnonymousCredentialSchemaSubject) GetContext() []string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *AnonymousCredentialSchemaSubject) GetPublicParams() *anonymouscredential.PublicParameters {
	if m != nil {
		return m.PublicParams
	}
	return nil
}

// UserCredentialSubject represents a privacy respecting
// credential_subject of a verifiable credential. This
// is used as an on chain verifiable credential.
type UserCredentialSubject struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Root       string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	IsVerified bool   `protobuf:"varint,3,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
}

func (m *UserCredentialSubject) Reset()         { *m = UserCredentialSubject{} }
func (m *UserCredentialSubject) String() string { return proto.CompactTextString(m) }
func (*UserCredentialSubject) ProtoMessage()    {}
func (*UserCredentialSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{2}
}
func (m *UserCredentialSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCredentialSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCredentialSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCredentialSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCredentialSubject.Merge(m, src)
}
func (m *UserCredentialSubject) XXX_Size() int {
	return m.Size()
}
func (m *UserCredentialSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCredentialSubject.DiscardUnknown(m)
}

var xxx_messageInfo_UserCredentialSubject proto.InternalMessageInfo

func (m *UserCredentialSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserCredentialSubject) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *UserCredentialSubject) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

// RegistrationCredentialSubject is used to identify a business entity
// https://github.com/allinbits/cosmos-cash/v3/blob/main/docs/Explanation/ADR/adr-005-registration-credential.md
type RegistrationCredentialSubject struct {
	// The value of id represents the ID of the credential_subject
	Id           string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address      *Address       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Ids          []*Id          `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	LegalPersons []*LegalPerson `protobuf:"bytes,4,rep,name=legal_persons,json=legalPersons,proto3" json:"legal_persons,omitempty"`
}

func (m *RegistrationCredentialSubject) Reset()         { *m = RegistrationCredentialSubject{} }
func (m *RegistrationCredentialSubject) String() string { return proto.CompactTextString(m) }
func (*RegistrationCredentialSubject) ProtoMessage()    {}
func (*RegistrationCredentialSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{3}
}
func (m *RegistrationCredentialSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationCredentialSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationCredentialSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationCredentialSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationCredentialSubject.Merge(m, src)
}
func (m *RegistrationCredentialSubject) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationCredentialSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationCredentialSubject.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationCredentialSubject proto.InternalMessageInfo

func (m *RegistrationCredentialSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegistrationCredentialSubject) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *RegistrationCredentialSubject) GetIds() []*Id {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RegistrationCredentialSubject) GetLegalPersons() []*LegalPerson {
	if m != nil {
		return m.LegalPersons
	}
	return nil
}

type LegalPerson struct {
	Names   []*Name `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	CtryReg string  `protobuf:"bytes,2,opt,name=ctry_reg,json=ctryReg,proto3" json:"ctry_reg,omitempty"`
}

func (m *LegalPerson) Reset()         { *m = LegalPerson{} }
func (m *LegalPerson) String() string { return proto.CompactTextString(m) }
func (*LegalPerson) ProtoMessage()    {}
func (*LegalPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{4}
}
func (m *LegalPerson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegalPerson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegalPerson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegalPerson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegalPerson.Merge(m, src)
}
func (m *LegalPerson) XXX_Size() int {
	return m.Size()
}
func (m *LegalPerson) XXX_DiscardUnknown() {
	xxx_messageInfo_LegalPerson.DiscardUnknown(m)
}

var xxx_messageInfo_LegalPerson proto.InternalMessageInfo

type Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{5}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return m.Size()
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

type Address struct {
	AddrType string `protobuf:"bytes,1,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	Thfare   string `protobuf:"bytes,2,opt,name=thfare,proto3" json:"thfare,omitempty"`
	Premise  string `protobuf:"bytes,3,opt,name=premise,proto3" json:"premise,omitempty"`
	Postcode string `protobuf:"bytes,4,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Locality string `protobuf:"bytes,5,opt,name=locality,proto3" json:"locality,omitempty"`
	Country  string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{6}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

type Id struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{7}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Id.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return m.Size()
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Id) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// The Proof message represents a cryptographic proof that the
// credential has not been tampered with or changed without the issuersi
// knowledge. This can be used to verify the verifiable credential.
type Proof struct {
	Type               string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Created            string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	ProofPurpose       string `protobuf:"bytes,3,opt,name=proof_purpose,json=proofPurpose,proto3" json:"proof_purpose,omitempty"`
	VerificationMethod string `protobuf:"bytes,4,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	Signature          string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{8}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Proof) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Proof) GetProofPurpose() string {
	if m != nil {
		return m.ProofPurpose
	}
	return ""
}

func (m *Proof) GetVerificationMethod() string {
	if m != nil {
		return m.VerificationMethod
	}
	return ""
}

func (m *Proof) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// VcMetadata defines metadata associated to a verifiable credential document
type VcMetadata struct {
	VersionId   string     `protobuf:"bytes,1,opt,name=versionId,proto3" json:"versionId,omitempty"`
	Created     *time.Time `protobuf:"bytes,2,opt,name=created,proto3,stdtime" json:"created,omitempty"`
	Updated     *time.Time `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated,omitempty"`
	Deactivated bool       `protobuf:"varint,4,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
}

func (m *VcMetadata) Reset()         { *m = VcMetadata{} }
func (m *VcMetadata) String() string { return proto.CompactTextString(m) }
func (*VcMetadata) ProtoMessage()    {}
func (*VcMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_caa28180a9dfbf42, []int{9}
}
func (m *VcMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VcMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VcMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VcMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VcMetadata.Merge(m, src)
}
func (m *VcMetadata) XXX_Size() int {
	return m.Size()
}
func (m *VcMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_VcMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_VcMetadata proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VerifiableCredential)(nil), "wasmd.verifiablecredential.VerifiableCredential")
	proto.RegisterType((*AnonymousCredentialSchemaSubject)(nil), "wasmd.verifiablecredential.AnonymousCredentialSchemaSubject")
	proto.RegisterType((*UserCredentialSubject)(nil), "wasmd.verifiablecredential.UserCredentialSubject")
	proto.RegisterType((*RegistrationCredentialSubject)(nil), "wasmd.verifiablecredential.RegistrationCredentialSubject")
	proto.RegisterType((*LegalPerson)(nil), "wasmd.verifiablecredential.LegalPerson")
	proto.RegisterType((*Name)(nil), "wasmd.verifiablecredential.Name")
	proto.RegisterType((*Address)(nil), "wasmd.verifiablecredential.Address")
	proto.RegisterType((*Id)(nil), "wasmd.verifiablecredential.Id")
	proto.RegisterType((*Proof)(nil), "wasmd.verifiablecredential.Proof")
	proto.RegisterType((*VcMetadata)(nil), "wasmd.verifiablecredential.VcMetadata")
}

func init() {
	proto.RegisterFile("cosmos-cash/verifiable-credential/verifiable-credential.proto", fileDescriptor_caa28180a9dfbf42)
}

var fileDescriptor_caa28180a9dfbf42 = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x8e, 0x93, 0x6c, 0x93, 0x4c, 0x76, 0xab, 0x32, 0x2c, 0x95, 0x09, 0x90, 0x84, 0xf4, 0x40,
	0x0e, 0xd4, 0xee, 0x06, 0x89, 0xc2, 0x8a, 0x4a, 0xb0, 0x05, 0xc1, 0x4a, 0x2d, 0x0a, 0xa6, 0x6c,
	0x25, 0x84, 0x64, 0x4d, 0xec, 0x77, 0x9d, 0xa9, 0x6c, 0x8f, 0x35, 0x33, 0x5e, 0x9a, 0x7f, 0xc0,
	0xb1, 0x3f, 0xa1, 0x57, 0xee, 0xfc, 0x00, 0x8e, 0x9c, 0x50, 0x8f, 0x9c, 0x00, 0xed, 0x5e, 0x10,
	0x07, 0x7e, 0x03, 0x9a, 0xf1, 0x27, 0x6c, 0xea, 0xf6, 0xe6, 0xf7, 0xe3, 0x79, 0xde, 0xef, 0x31,
	0xba, 0xe3, 0x31, 0x11, 0x31, 0x71, 0xd3, 0x23, 0x62, 0x6d, 0x9f, 0x01, 0xa7, 0xa7, 0x94, 0xac,
	0x42, 0xb8, 0xe9, 0x71, 0xf0, 0x21, 0x96, 0x94, 0x84, 0xdb, 0xb5, 0x56, 0xc2, 0x99, 0x64, 0x78,
	0xf4, 0x3d, 0x11, 0x91, 0x6f, 0x55, 0x2e, 0x95, 0xc7, 0x68, 0x3f, 0x60, 0x01, 0xd3, 0x6e, 0xb6,
	0xfa, 0xca, 0x10, 0xa3, 0x49, 0xc0, 0x58, 0x10, 0x82, 0xad, 0xa5, 0x55, 0x7a, 0x6a, 0x4b, 0x1a,
	0x81, 0x90, 0x24, 0x4a, 0x72, 0x87, 0x71, 0x96, 0x91, 0xbd, 0x22, 0x02, 0xec, 0xb3, 0x83, 0x15,
	0x48, 0x72, 0x60, 0x7b, 0x8c, 0xc6, 0xb9, 0xfd, 0xe1, 0x8b, 0x33, 0xf6, 0xf8, 0x26, 0x91, 0xcc,
	0x26, 0x31, 0x8b, 0x37, 0x11, 0x4b, 0x45, 0xcd, 0x54, 0xea, 0x2e, 0xd5, 0x32, 0xfb, 0xb9, 0x8b,
	0xf6, 0x4f, 0x4a, 0xbe, 0xbb, 0xa5, 0x19, 0xdf, 0x42, 0x3d, 0x8f, 0xc5, 0x12, 0x1e, 0x4b, 0xd3,
	0x98, 0x76, 0xe6, 0x83, 0xa3, 0xeb, 0x7f, 0xff, 0x3e, 0xc1, 0x1f, 0xe7, 0xba, 0x77, 0x59, 0x44,
	0x25, 0x44, 0x89, 0xdc, 0x38, 0x85, 0x1b, 0xbe, 0x8a, 0xda, 0xd4, 0x37, 0xdb, 0x53, 0x63, 0x3e,
	0x70, 0xda, 0xd4, 0xc7, 0x18, 0x75, 0xe5, 0x26, 0x01, 0xb3, 0xa3, 0xe0, 0x8e, 0xfe, 0xc6, 0xd7,
	0xd1, 0x15, 0x2a, 0x44, 0x0a, 0xdc, 0xec, 0x6a, 0xbf, 0x5c, 0xc2, 0x9f, 0xa1, 0x3d, 0xf5, 0x45,
	0x62, 0x0f, 0x5c, 0x9f, 0x48, 0x30, 0x77, 0xa6, 0xc6, 0x7c, 0xb8, 0x18, 0x59, 0x59, 0xe3, 0xac,
	0xa2, 0x71, 0xd6, 0x83, 0xa2, 0x71, 0x47, 0xdd, 0x27, 0x7f, 0x4c, 0x0c, 0x67, 0xb7, 0x80, 0x7d,
	0x4a, 0x24, 0xe0, 0x35, 0x7a, 0x85, 0x43, 0x40, 0x85, 0xe4, 0x44, 0x52, 0x16, 0xbb, 0xaa, 0x5c,
	0xf3, 0x8a, 0xa6, 0xfa, 0xd0, 0x7a, 0xfe, 0xd4, 0x2c, 0xa7, 0x06, 0xaa, 0x7a, 0xf0, 0x75, 0xba,
	0x7a, 0x04, 0x9e, 0xfc, 0xa2, 0xe5, 0x5c, 0xe3, 0xff, 0x73, 0xc0, 0x4b, 0x34, 0x48, 0x05, 0xf0,
	0x2c, 0x42, 0x4f, 0x47, 0x38, 0x68, 0x8a, 0xf0, 0x8d, 0x00, 0xbe, 0x8d, 0xb9, 0x9f, 0xe6, 0x06,
	0xbc, 0x46, 0xd7, 0xd4, 0x9c, 0x34, 0xa3, 0x2b, 0xbc, 0x35, 0x44, 0xc4, 0xec, 0x6b, 0xe2, 0x8f,
	0x9a, 0x88, 0x3f, 0x29, 0x66, 0x5b, 0x63, 0xd7, 0xe0, 0x2a, 0xc6, 0x55, 0xc5, 0xab, 0xcc, 0x99,
	0x01, 0xdf, 0x46, 0x3b, 0x09, 0x67, 0xec, 0xd4, 0x1c, 0x68, 0xfa, 0xb7, 0x9b, 0xe8, 0x97, 0xca,
	0xd1, 0xc9, 0xfc, 0x8f, 0xf6, 0x11, 0xae, 0x4c, 0xae, 0xc8, 0x02, 0xcc, 0x7e, 0x35, 0xd0, 0xf4,
	0x45, 0x59, 0xe4, 0xcb, 0x61, 0x5c, 0x5a, 0x8e, 0x76, 0x6d, 0x39, 0xcc, 0x6a, 0xe5, 0xb2, 0x9d,
	0x29, 0x57, 0x2b, 0x44, 0x7b, 0x49, 0xba, 0x0a, 0xa9, 0xe7, 0x26, 0x84, 0x93, 0x48, 0xe8, 0xed,
	0x19, 0x2e, 0x3e, 0x6f, 0xca, 0x3c, 0xbb, 0x07, 0x6b, 0xcb, 0x3d, 0x58, 0x4b, 0xcd, 0xb5, 0x54,
	0x54, 0x20, 0x81, 0x0b, 0x67, 0x37, 0xa9, 0x34, 0x62, 0xf6, 0x1d, 0x7a, 0x6d, 0xeb, 0xb8, 0xb6,
	0x15, 0xc1, 0x19, 0x93, 0xf9, 0xce, 0xeb, 0x6f, 0x3c, 0x41, 0x43, 0x2a, 0xdc, 0x2c, 0x23, 0xf0,
	0xcd, 0xce, 0xd4, 0x98, 0xf7, 0x1d, 0x44, 0xc5, 0x49, 0xae, 0x99, 0xfd, 0x63, 0xa0, 0xb7, 0x1a,
	0xf7, 0xed, 0x52, 0x98, 0x3b, 0xa8, 0x47, 0x7c, 0x9f, 0x83, 0x10, 0x3a, 0xd2, 0x70, 0x71, 0xa3,
	0x71, 0x21, 0x32, 0x57, 0xa7, 0xc0, 0xe0, 0x5b, 0xa8, 0x43, 0x7d, 0xa1, 0x5b, 0x3a, 0x5c, 0x8c,
	0x9b, 0xa0, 0xc7, 0xbe, 0xa3, 0x5c, 0xf1, 0x3d, 0xb4, 0x17, 0x42, 0x40, 0x42, 0x37, 0x01, 0x2e,
	0x58, 0xac, 0xda, 0xad, 0xb0, 0xef, 0x34, 0x61, 0xef, 0x29, 0xc0, 0x52, 0xfb, 0x3b, 0xbb, 0x61,
	0x25, 0x88, 0xd9, 0x23, 0x34, 0xac, 0x19, 0xf1, 0xfb, 0x68, 0x27, 0x26, 0x11, 0x08, 0xfd, 0xac,
	0x0c, 0x17, 0xd3, 0x26, 0xd2, 0x2f, 0x49, 0x04, 0x4e, 0xe6, 0x8e, 0x5f, 0x47, 0x7d, 0x4f, 0xf2,
	0x8d, 0xcb, 0x21, 0xc8, 0x1b, 0xde, 0x53, 0xb2, 0x03, 0xc1, 0x61, 0xff, 0x87, 0xa7, 0x93, 0xd6,
	0x5f, 0x4f, 0x27, 0xad, 0xd9, 0x07, 0xa8, 0xab, 0x30, 0x6a, 0x32, 0x0a, 0x95, 0x37, 0x51, 0x7f,
	0xd7, 0x56, 0xce, 0x28, 0x56, 0xae, 0x86, 0xfc, 0xc9, 0x40, 0xbd, 0xbc, 0x75, 0xf8, 0x0d, 0x34,
	0x50, 0xcd, 0x73, 0xb5, 0x7b, 0x46, 0xd1, 0x57, 0x8a, 0x07, 0xf9, 0x13, 0x26, 0xd7, 0xa7, 0x84,
	0x17, 0x44, 0xb9, 0xa4, 0xb6, 0x37, 0xe1, 0x10, 0x51, 0x01, 0x7a, 0xe8, 0x03, 0xa7, 0x10, 0xf1,
	0x08, 0xf5, 0x13, 0x26, 0xa4, 0xc7, 0x7c, 0xc8, 0x9f, 0xbd, 0x52, 0x56, 0xb6, 0x90, 0x79, 0x24,
	0xa4, 0x72, 0xa3, 0xdf, 0xbc, 0x81, 0x53, 0xca, 0xd9, 0x3d, 0xa4, 0xb1, 0xe4, 0x1b, 0xfd, 0x86,
	0xe9, 0x7b, 0xd0, 0x62, 0x2d, 0xed, 0x39, 0x6a, 0x1f, 0xfb, 0x0d, 0xd7, 0x55, 0x96, 0x3a, 0xfb,
	0xd1, 0x40, 0x3b, 0xfa, 0x9a, 0x4b, 0xab, 0x51, 0x59, 0x75, 0x2c, 0x0e, 0x44, 0x82, 0x5f, 0x36,
	0x37, 0x13, 0xf1, 0x0d, 0xb4, 0xa7, 0xaf, 0xdf, 0x4d, 0x52, 0x9e, 0xb0, 0xb2, 0xba, 0x5d, 0xad,
	0x5c, 0x66, 0x3a, 0x6c, 0xa3, 0x57, 0xb3, 0x01, 0x7a, 0xd9, 0xc3, 0x1b, 0x81, 0x5c, 0x33, 0x3f,
	0xaf, 0x16, 0xd7, 0x4d, 0xf7, 0xb5, 0x05, 0xbf, 0x89, 0x06, 0x82, 0x06, 0x31, 0x91, 0x29, 0x87,
	0xbc, 0xf0, 0x4a, 0xa1, 0x9e, 0x14, 0x74, 0xe2, 0xdd, 0x07, 0x49, 0x7c, 0x22, 0x89, 0x72, 0x3e,
	0x03, 0x2e, 0x28, 0x8b, 0x8f, 0x8b, 0x2a, 0x2b, 0x05, 0x3e, 0xfc, 0x6f, 0xea, 0x2f, 0xf3, 0xd7,
	0x28, 0x8b, 0x3b, 0x44, 0xbd, 0x34, 0xf1, 0x35, 0xb6, 0xf3, 0xb2, 0xd8, 0x1c, 0x80, 0xa7, 0x68,
	0xe8, 0x03, 0xf1, 0x24, 0x3d, 0xd3, 0xf8, 0xae, 0xbe, 0xf4, 0xba, 0xaa, 0x1c, 0x93, 0x71, 0xf4,
	0xd5, 0x2f, 0xe7, 0x63, 0xe3, 0xd9, 0xf9, 0xd8, 0xf8, 0xf3, 0x7c, 0x6c, 0x3c, 0xb9, 0x18, 0xb7,
	0x9e, 0x5d, 0x8c, 0x5b, 0xbf, 0x5d, 0x8c, 0x5b, 0xdf, 0xde, 0x0e, 0xa8, 0x5c, 0xa7, 0x2b, 0xcb,
	0x63, 0x91, 0x7d, 0x97, 0x89, 0xe8, 0x21, 0x11, 0x91, 0xad, 0x4f, 0xc2, 0x7e, 0xfc, 0x9c, 0x3f,
	0xbd, 0x1a, 0x98, 0x58, 0x5d, 0xd1, 0x19, 0xbe, 0xf7, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6,
	0x26, 0x79, 0x29, 0xcd, 0x08, 0x00, 0x00,
}

func (this *VcMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VcMetadata)
	if !ok {
		that2, ok := that.(VcMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VersionId != that1.VersionId {
		return false
	}
	if that1.Created == nil {
		if this.Created != nil {
			return false
		}
	} else if !this.Created.Equal(*that1.Created) {
		return false
	}
	if that1.Updated == nil {
		if this.Updated != nil {
			return false
		}
	} else if !this.Updated.Equal(*that1.Updated) {
		return false
	}
	if this.Deactivated != that1.Deactivated {
		return false
	}
	return true
}
func (m *VerifiableCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifiableCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CredentialSubject != nil {
		{
			size := m.CredentialSubject.Size()
			i -= size
			if _, err := m.CredentialSubject.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IssuanceDate != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuanceDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		for iNdEx := len(m.Type) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Type[iNdEx])
			copy(dAtA[i:], m.Type[iNdEx])
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Context) > 0 {
		for iNdEx := len(m.Context) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Context[iNdEx])
			copy(dAtA[i:], m.Context[iNdEx])
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Context[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerifiableCredential_RegistrationCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_RegistrationCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegistrationCred != nil {
		{
			size, err := m.RegistrationCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VerifiableCredential_UserCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_UserCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserCred != nil {
		{
			size, err := m.UserCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *VerifiableCredential_AnonCredSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_AnonCredSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnonCredSchema != nil {
		{
			size, err := m.AnonCredSchema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AnonymousCredentialSchemaSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymousCredentialSchemaSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymousCredentialSchemaSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PublicParams != nil {
		{
			size, err := m.PublicParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Context) > 0 {
		for iNdEx := len(m.Context) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Context[iNdEx])
			copy(dAtA[i:], m.Context[iNdEx])
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Context[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Type) > 0 {
		for iNdEx := len(m.Type) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Type[iNdEx])
			copy(dAtA[i:], m.Type[iNdEx])
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserCredentialSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCredentialSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCredentialSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistrationCredentialSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationCredentialSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationCredentialSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LegalPersons) > 0 {
		for iNdEx := len(m.LegalPersons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LegalPersons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LegalPerson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegalPerson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegalPerson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CtryReg) > 0 {
		i -= len(m.CtryReg)
		copy(dAtA[i:], m.CtryReg)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.CtryReg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Names[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Locality) > 0 {
		i -= len(m.Locality)
		copy(dAtA[i:], m.Locality)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Locality)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Postcode) > 0 {
		i -= len(m.Postcode)
		copy(dAtA[i:], m.Postcode)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Postcode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Premise) > 0 {
		i -= len(m.Premise)
		copy(dAtA[i:], m.Premise)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Premise)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Thfare) > 0 {
		i -= len(m.Thfare)
		copy(dAtA[i:], m.Thfare)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Thfare)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddrType) > 0 {
		i -= len(m.AddrType)
		copy(dAtA[i:], m.AddrType)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.AddrType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Id) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VerificationMethod) > 0 {
		i -= len(m.VerificationMethod)
		copy(dAtA[i:], m.VerificationMethod)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.VerificationMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofPurpose) > 0 {
		i -= len(m.ProofPurpose)
		copy(dAtA[i:], m.ProofPurpose)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.ProofPurpose)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VcMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VcMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VcMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deactivated {
		i--
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Updated != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Updated):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x1a
	}
	if m.Created != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VersionId) > 0 {
		i -= len(m.VersionId)
		copy(dAtA[i:], m.VersionId)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.VersionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVerifiableCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovVerifiableCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerifiableCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Context) > 0 {
		for _, s := range m.Context {
			l = len(s)
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if len(m.Type) > 0 {
		for _, s := range m.Type {
			l = len(s)
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.IssuanceDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate)
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.CredentialSubject != nil {
		n += m.CredentialSubject.Size()
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *VerifiableCredential_RegistrationCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegistrationCred != nil {
		l = m.RegistrationCred.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *VerifiableCredential_UserCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserCred != nil {
		l = m.UserCred.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *VerifiableCredential_AnonCredSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnonCredSchema != nil {
		l = m.AnonCredSchema.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *AnonymousCredentialSchemaSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if len(m.Type) > 0 {
		for _, s := range m.Type {
			l = len(s)
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	if len(m.Context) > 0 {
		for _, s := range m.Context {
			l = len(s)
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	if m.PublicParams != nil {
		l = m.PublicParams.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *UserCredentialSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	return n
}

func (m *RegistrationCredentialSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			l = e.Size()
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	if len(m.LegalPersons) > 0 {
		for _, e := range m.LegalPersons {
			l = e.Size()
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	return n
}

func (m *LegalPerson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, e := range m.Names {
			l = e.Size()
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	l = len(m.CtryReg)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddrType)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Thfare)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Premise)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Postcode)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Locality)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.ProofPurpose)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.VerificationMethod)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *VcMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.Created != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created)
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.Updated != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Updated)
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.Deactivated {
		n += 2
	}
	return n
}

func sovVerifiableCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerifiableCredential(x uint64) (n int) {
	return sovVerifiableCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerifiableCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifiableCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifiableCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuanceDate == nil {
				m.IssuanceDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuanceDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegistrationCredentialSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_RegistrationCred{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserCredentialSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_UserCred{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnonCredSchema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnonymousCredentialSchemaSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_AnonCredSchema{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymousCredentialSchemaSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousCredentialSchemaSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousCredentialSchemaSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicParams == nil {
				m.PublicParams = &anonymouscredential.PublicParameters{}
			}
			if err := m.PublicParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCredentialSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCredentialSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCredentialSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrationCredentialSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationCredentialSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationCredentialSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, &Id{})
			if err := m.Ids[len(m.Ids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalPersons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegalPersons = append(m.LegalPersons, &LegalPerson{})
			if err := m.LegalPersons[len(m.LegalPersons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegalPerson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegalPerson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegalPerson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, &Name{})
			if err := m.Names[len(m.Names)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtryReg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtryReg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thfare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thfare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premise", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Premise = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Id) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Id: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Id: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPurpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofPurpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VcMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VcMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VcMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerifiableCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerifiableCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVerifiableCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVerifiableCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVerifiableCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerifiableCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVerifiableCredential = fmt.Errorf("proto: unexpected end of group")
)
